<!-- Add this script at the very top of your file, before any other content -->
<script src="../../assets/js/tokenUtils.js"></script>

<script>
    (function checkAccess() {
        try {
            const loginType = getUserLoginType();
            if (loginType !== 'ro_admin' && loginType !== 'chapter') {
                document.body.innerHTML = `
                    <div style="display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f8f9fa;">
                        <div style="text-align: center; padding: 20px; background-color: white; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                            <h2 style="color: #dc3545; margin-bottom: 10px;">Unauthorized Access</h2>
                            <p style="color: #6c757d;">Only RO Admin and Chapter can access this page.</p>
                            <a href="/" style="display: inline-block; margin-top: 15px; padding: 8px 16px; background-color: #0d6efd; color: white; text-decoration: none; border-radius: 4px;">Go to Home</a>
                        </div>
                    </div>
                `;
            }
        } catch (error) {
            console.error('Access check failed:', error);
            window.location.href = '/';
        }
    })();
</script>
<script>
  console.log('=== Back to Admin Button Rendering Process Started ===');
  
  // Get login type from token
  const userType = getUserLoginType();
  console.log('Current User Type:', userType);
  
  // Prepare button HTML
  // const backToAdminButton = `
  //     <div class="btn-list" style="margin-left: 95em; margin-top: -2em; ">
  //         <a href="/d/ro-dashboard" id="backToAdminBtn">
  //             <button class="btn btn-danger btn-wave me-0">
  //                 <i class="ri-admin-line me-1"></i> Back to Admin
  //             </button>
  //         </a>
  //     </div>
  // `;
  
  // Add button if user is ro_admin
  // if (userType === 'ro_admin') {
  //     console.log('User is ro_admin, injecting Back to Admin button...');
      
  //     // Add button to DOM when it's ready
  //     document.addEventListener('DOMContentLoaded', () => {
  //         const headerContainer = document.querySelector('.page-title');
  //         if (headerContainer) {
  //             console.log('Found header container, adding Back to Admin button');
  //             headerContainer.insertAdjacentHTML('afterend', backToAdminButton);
              
  //             // Add click handler
  //             const backToAdminBtn = document.getElementById('backToAdminBtn');
  //             if (backToAdminBtn) {
  //                 backToAdminBtn.addEventListener('click', () => {
  //                     console.log('Back to Admin button clicked');
  //                     // Clear chapter-specific data
  //                     localStorage.removeItem('current_chapter_email');
  //                     localStorage.removeItem('current_chapter_id');
  //                     console.log('Cleared chapter-specific localStorage data');
  //                     console.log('Redirecting to ro-dashboard...');
  //                 });
  //                 console.log('Back to Admin button setup completed');
  //             }
  //         } else {
  //             console.error('Header container not found in DOM');
  //         }
  //     });
  // } else {
  //     console.log('User is not ro_admin, skipping Back to Admin button');
  // }
  
  console.log('=== Back to Admin Button Rendering Process Completed ===');
</script>
<!-- header -->
<%- include('../partials/header') %>
<!-- end header -->

<!-- sidebar -->
<%- include('../partials/chapter-sidebar') %>
<!-- end sidebar -->

<style>
  /* Ensuring that the modal body has padding */
  .modal-body {
    padding: 20px;
  }

  /* Preventing the add button container from affecting layout */
  .add-button-container {
    margin-top: 10px;
    display: none;
  }

  /* Custom dropdown style */
  .custom-dropdown {
    position: relative;
    cursor: pointer;
    border: 1px solid #ccc;
    padding: 10px;
    border-radius: 5px;
  }

  .options {
    display: none;
    position: absolute;
    border: 1px solid #ccc;
    background: white;
    width: 100%;
    max-height: 200px;
    overflow-y: auto;
    z-index: 1;
  }

  .options div {
    padding: 10px;
    display: flex;
    align-items: center;
  }

  .options div:hover {
    background-color: #f0f0f0;
  }

  .selected {
    display: flex;
    align-items: center;
  }
</style>

<!-- Start::app-content -->
<div class="main-content app-content" style="background-color: #f4f4f4">
  <div class="container-fluid">
    <!-- Start::page-header -->
    <div class="d-flex align-items-center justify-content-between page-header-breadcrumb flex-wrap gap-2">
      <div>
        <h1 class="page-title fw-medium fs-18 mb-0">
          <span style="font-weight: 700; font-family: Poppins">Add New Expense</span>
        </h1>
      </div>
    </div>
    <!-- End::page-header -->

    <form id="addExpenseForm">
      <div class="row">
        <div class="col-xl-12">
          <div class="card custom-card">
            <div class="card-body add-products">
              <div class="row gx-4">
                <div class="col-xxl-12 col-xl-12 col-lg-12 col-md-6">
                  <div class="card custom-card shadow-none mb-0 border-0">
                    <div class="card-body p-0">
                      <div class="row gy-3">
                        <div class="col-xl-12">
                          <label for="product-cost-add" class="form-label">
                            <span style="font-size: 15px"><b>It's time to add a new expense!</b></span>
                          </label>
                          <button class="btn btn-danger border" type="button" id="addNewExpenseBtn" data-region-id="123" style="float: right">
                            + Add New Expense Type
                          </button>
                          <button class="btn btn-primary border" type="button" id="viewExpenseBtn" style="float: right; margin-right: 10px;">
                             + View Expense types
                          </button>
                        </div>

                        <div class="col-xl-6">
                          <label for="expense_type" class="form-label">Type of Expense</label>
                          <select class="form-control" name="expense_type" id="expense_type">
                            <option value="">Loading...</option>
                          </select>
                        </div>
                        <div class="col-xl-6">
                          <label for="submitted_by" class="form-label">Submitted By:</label>
                          <input type="text" class="form-control" id="submitted_by" name="submitted_by" placeholder="Enter Name" maxlength="50" />
                        </div>

                        <div class="row">
                          <div class="col-xl-6">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" placeholder="Enter description" rows="3" maxlength="200"></textarea>
                          </div>

                          <div class="col-xl-6">
                            <label for="chapter" class="form-label">Chapter</label>
                            <select class="form-control" name="chapter" id="chapter">
                              <option value="">Select Chapter</option>
                            </select>
                          </div>
                        </div>

                        <!-- Hotel Selection Section (Initially Hidden) -->
                        <div id="hotelSection" style="display: none;" class="row mt-3">
                          <div class="col-xl-12">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                              <label for="hotel" class="form-label">Select Hotel</label>
                              <a href="/h/add-hotel" class="btn btn-danger btn-sm">+ Add New Hotel</a>
                            </div>
                            <select class="form-control" name="hotel" id="hotel">
                              <option value="">Select Hotel</option>
                            </select>
                          </div>
                        </div>

                        <!-- Hotel Details Section (Initially Hidden) -->
                        <div id="hotelDetailsSection" style="display: none;" class="row mt-3">
                          <div class="col-xl-6 col-md-6 mb-3">
                            <label class="form-label">Bank Name</label>
                            <input type="text" class="form-control" id="bank_name" readonly />
                          </div>
                          <div class="col-xl-6 col-md-6 mb-3">
                            <label class="form-label">IFSC Code</label>
                            <input type="text" class="form-control" id="ifsc_code" readonly />
                          </div>
                          <div class="col-xl-6 col-md-6 mb-3">
                            <label class="form-label">Account Number</label>
                            <input type="text" class="form-control" id="account_no" readonly />
                          </div>
                          <div class="col-xl-6 col-md-6 mb-3">
                            <label class="form-label">Account Type</label>
                            <input type="text" class="form-control" id="account_type" readonly />
                          </div>
                          <div class="col-xl-6 col-md-6 mb-3">
                            <label class="form-label">Hotel GST</label>
                            <input type="text" class="form-control" id="hotel_gst" readonly />
                          </div>
                        </div>

                        <!-- Vendor Selection Section (Initially Hidden) -->
                        <div id="vendorSection" style="display: none;" class="row mt-3">
                          <div class="col-xl-12">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                              <label for="vendor" class="form-label">Select Vendor</label>
                              <button type="button" class="btn btn-danger btn-sm" id="addNewVendorBtn">+ Add New Vendor</button>
                            </div>
                            <select class="form-control" name="vendor" id="vendor">
                              <option value="">Select Vendor</option>
                            </select>
                          </div>
                        </div>

                        <!-- Vendor Details Section (Initially Hidden) -->
                        <div id="vendorDetailsSection" style="display: none;" class="row mt-3">
                          <div class="col-xl-6 col-md-6 mb-3">
                            <label class="form-label">Company Name</label>
                            <input type="text" class="form-control" id="vendor_company_name" readonly />
                          </div>
                          <div class="col-xl-6 col-md-6 mb-3">
                            <label class="form-label">Company Address</label>
                            <input type="text" class="form-control" id="vendor_company_address" readonly />
                          </div>
                          <div class="col-xl-6 col-md-6 mb-3">
                            <label class="form-label">Phone Number</label>
                            <input type="text" class="form-control" id="vendor_phone" readonly />
                          </div>
                          <div class="col-xl-6 col-md-6 mb-3">
                            <label class="form-label">Email</label>
                            <input type="text" class="form-control" id="vendor_email" readonly />
                          </div>
                          <div class="col-xl-6 col-md-6 mb-3">
                            <label class="form-label">Company GST</label>
                            <input type="text" class="form-control" id="vendor_company_gst" readonly />
                          </div>
                          <div class="col-xl-6 col-md-6 mb-3">
                            <label class="form-label">Bank Name</label>
                            <input type="text" class="form-control" id="vendor_bank_name" readonly />
                          </div>
                          <div class="col-xl-6 col-md-6 mb-3">
                            <label class="form-label">Account Number</label>
                            <input type="text" class="form-control" id="vendor_account" readonly />
                          </div>
                          <div class="col-xl-6 col-md-6 mb-3">
                            <label class="form-label">IFSC Code</label>
                            <input type="text" class="form-control" id="vendor_ifsc_code" readonly />
                          </div>
                          <div class="col-xl-6 col-md-6 mb-3">
                            <label class="form-label">Account Type</label>
                            <input type="text" class="form-control" id="vendor_account_type" readonly />
                          </div>
                        </div>

                        <div id="membershipFeesContainer" class="container">
                          <div class="row">
                            <div class="col-xl-4 col-md-4">
                              <label class="form-label" for="amount">Base Amount (Without GST)</label>
                              <input type="number" class="form-control" id="amount" name="amount" placeholder="Enter Amount" maxlength="10" required />
                              
                              <!-- Added GST Checkbox -->
                              <div class="form-check mt-2" style="margin-left: 4px;">
                                <input 
                                  type="checkbox" 
                                  class="form-check-input" 
                                  id="withGST" 
                                  name="withGST"
                                  style="cursor: pointer;"
                                />
                                <label class="form-check-label" for="withGST" style="cursor: pointer; user-select: none;">
                                  With GST
                                </label>
                              </div>

                              <!-- GST Calculation Fields (Initially Hidden) -->
                              <div id="gstCalculationFields" style="display: none;" class="mt-3">
                                <div class="row">
                                  <div class="col-4">
                                    <label class="form-label" for="gstPercentage">GST %</label>
                                    <select class="form-control" id="gstPercentage" name="gstPercentage">
                                      <option value="5">5%</option>
                                      <option value="9">9%</option>
                                      <option value="12">12%</option>
                                      <option value="18" selected>18%</option>
                                      <option value="28">28%</option>
                                    </select>
                                  </div>
                                  <div class="col-4">
                                    <label class="form-label" for="gstAmount">GST Amount</label>
                                    <input type="number" class="form-control" id="gstAmount" name="gstAmount" readonly />
                                  </div>
                                  <div class="col-4">
                                    <label class="form-label" for="totalAmount">Total Amount</label>
                                    <input type="number" class="form-control" id="totalAmount" name="totalAmount" readonly />
                                  </div>
                                </div>
                              </div>
                            </div>

                            <div class="col-xl-4 col-md-4">
                              <label for="payment_status" class="form-label">Payment Status</label>
                                <select class="form-control" name="payment_status" id="payment_status" required>
                                <option value="">Payment Status</option>
                                <option value="paid">Paid</option>
                                <option value="pending">Pending</option>
                                </select>
                            </div>

                            <div class="col-xl-4 col-md-4">
                              <label for="bill_date" class="form-label">Bill Date:</label>
                              <input type="date" id="bill_date" name="bill_date" class="form-control" />
                            </div>
                            <div class="col-xl-4">
                              <label for="expense_entry_date" class="form-label">Expense Entry Date:</label>
                              <input type="text" id="expense_entry_date" name="expense_entry_date" class="form-control" readonly style="background-color: #f8f9fa;" />
                            </div>
                          </div>

                          <div class="row">
                            <div class="col-xl-3">
                              <label for="upload_bill" class="form-label">Upload Bill</label>
                              <input type="file" class="form-control" id="upload_bill" name="upload_bill" required />
                            </div>
                            <div class="col-xl-3">
                              <label for="upload_receipt" class="form-label">Upload Receipt</label>
                              <input type="file" class="form-control" id="upload_receipt" name="upload_receipt" />
                            </div>
                            <div class="col-xl-3">
                              <label for="bill_no" class="form-label">Bill No.</label>
                              <input type="text" class="form-control" id="bill_no" name="bill_no" placeholder="Enter Bill No." maxlength="20"/>
                            </div>
                            <div class="col-xl-3">
                              <label for="transaction_no" class="form-label">Transaction No.</label>
                              <input type="text" class="form-control" id="transaction_no" name="transaction_no" placeholder="Enter Transaction No" maxlength="20" />
                            </div>
                          </div>
                          <div class="col-xl-4">
                            <label for="payment_mode" class="form-label">Mode of Payment</label>
                            <select class="form-control" name="payment_mode" id="payment_mode" required>
                              <option value="">Select Payment Mode</option>
                              <option value="cash">Cash</option>
                              <option value="online">Online</option>
                            </select>
                          </div>
                        </div>
                        </br>
                          <button type="button" id="addExpenseButton" class="btn btn-success me-2 mb-2 mb-sm-0" style="width: 150px;">Add Expense</button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </form>
    <div id="formMessage"></div>
  </div>
</div>

<!-- Add New Vendor Modal -->
<div class="modal fade" id="addVendorModal" tabindex="-1" aria-labelledby="addVendorModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addVendorModalLabel">Add New Vendor</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addVendorForm">
          <div class="row mb-3">
            <div class="col-md-6">
              <label for="vendor_name" class="form-label">Vendor Name</label>
              <input type="text" class="form-control" id="vendor_name" name="vendor_name" required>
            </div>
            <div class="col-md-6">
              <label for="vendor_company_name" class="form-label">Company Name</label>
              <input type="text" class="form-control" id="vendor_company_name_modal" name="vendor_company_name" required>
            </div>
          </div>
          <div class="row mb-3">
            <div class="col-md-6">
              <label for="vendor_company_address" class="form-label">Company Address</label>
              <input type="text" class="form-control" id="vendor_company_address_modal" name="vendor_company_address" required>
            </div>
            <div class="col-md-6">
              <label for="vendor_company_gst" class="form-label">Company GST</label>
              <input type="text" class="form-control" id="vendor_company_gst_modal" name="vendor_company_gst">
            </div>
          </div>
          <div class="row mb-3">
            <div class="col-md-6">
              <label for="phone_number" class="form-label">Phone Number</label>
              <input type="tel" class="form-control" id="phone_number" name="phone_number" required>
            </div>
            <div class="col-md-6">
              <label for="email_id" class="form-label">Email ID</label>
              <input type="email" class="form-control" id="email_id" name="email_id" required>
            </div>
          </div>
          <div class="row mb-3">
            <div class="col-md-6">
              <label for="vendor_bank_name" class="form-label">Bank Name</label>
              <input type="text" class="form-control" id="vendor_bank_name_modal" name="vendor_bank_name" required>
            </div>
            <div class="col-md-6">
              <label for="vendor_account" class="form-label">Account Number</label>
              <input type="text" class="form-control" id="vendor_account_modal" name="vendor_account" required>
            </div>
          </div>
          <div class="row mb-3">
            <div class="col-md-6">
              <label for="vendor_ifsc_code" class="form-label">IFSC Code</label>
              <input type="text" class="form-control" id="vendor_ifsc_code_modal" name="vendor_ifsc_code" required>
            </div>
            <div class="col-md-6">
              <label for="vendor_account_type" class="form-label">Account Type</label>
              <select class="form-control" id="vendor_account_type_modal" name="vendor_account_type" required>
                <option value="">Select Account Type</option>
                <option value="Savings">Savings</option>
                <option value="Current">Current</option>
              </select>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="saveVendorBtn">Save Vendor</button>
      </div>
    </div>
  </div>
</div>

<!-- End::content -->

<script>
document.addEventListener("DOMContentLoaded", async function () {
  // First get the login type and email from token
  const loginType = getUserLoginType();
  const userEmail = getUserEmail();

  function showLoader() {
  document.getElementById("loader").style.display = "flex"; // Show loader
}

// Function to hide the loader
function hideLoader() {
  document.getElementById("loader").style.display = "none"; // Hide loader
}
  
  console.log('Current user details:', {
    loginType: loginType,
    email: userEmail
  });

  function setCurrentDateTime() {
    const now = new Date();
    const options = {
      timeZone: 'Asia/Kolkata',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: true
    };
    const istDateTime = now.toLocaleString('en-IN', options);
    document.getElementById('expense_entry_date').value = istDateTime;

    // Format for database (YYYY-MM-DD HH:MM:SS)
    const dbFormat = now.toLocaleString('en-US', {
      timeZone: 'Asia/Kolkata',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: false
    }).replace(/(\d+)\/(\d+)\/(\d+),\s(\d+):(\d+):(\d+)/, '$3-$1-$2 $4:$5:$6');
    
    // Store the database format in a data attribute
    document.getElementById('expense_entry_date').setAttribute('data-db-format', dbFormat);
  }


  // Set initial date and time
  setCurrentDateTime();

  // Update time every second
  setInterval(setCurrentDateTime, 1000);
  // Function to fetch hotels
  async function fetchHotels() {
    try {
      const response = await fetch('https://backend.bninewdelhi.com/api/getHotels');
      if (!response.ok) throw new Error('Failed to fetch hotels');
      return await response.json();
    } catch (error) {
      console.error('Error fetching hotels:', error);
      throw error;
    }
  }

  // Function to populate hotel dropdown
  async function populateHotelDropdown() {
    try {
      const hotels = await fetchHotels();
      const hotelDropdown = document.getElementById('hotel');
      
      // Clear existing options
      hotelDropdown.innerHTML = '<option value="">Select Hotel</option>';
      
      // Sort hotels by name
      hotels.sort((a, b) => a.hotel_name.localeCompare(b.hotel_name));
      
      // Add hotel options
      hotels.forEach(hotel => {
        const option = document.createElement('option');
        option.value = hotel.hotel_id;
        option.textContent = hotel.hotel_name;
        hotelDropdown.appendChild(option);
      });
    } catch (error) {
      console.error('Error populating hotel dropdown:', error);
      Swal.fire('Error!', 'Failed to load hotels', 'error');
    }
  }

  // Function to handle hotel selection
  async function handleHotelSelection(hotelId) {
    try {
      const hotels = await fetchHotels();
      const selectedHotel = hotels.find(hotel => hotel.hotel_id === parseInt(hotelId));
      
      if (selectedHotel) {
        // Populate hotel details fields
        document.getElementById('bank_name').value = selectedHotel.bank_name || 'N/A';
        document.getElementById('ifsc_code').value = selectedHotel.ifsc_code || 'N/A';
        document.getElementById('account_no').value = selectedHotel.account_no || 'N/A';
        document.getElementById('account_type').value = selectedHotel.account_type || 'N/A';
        document.getElementById('hotel_gst').value = selectedHotel.hotel_gst || 'N/A';
        
        // Show hotel details section
        document.getElementById('hotelDetailsSection').style.display = 'flex';
      }
    } catch (error) {
      console.error('Error handling hotel selection:', error);
      Swal.fire('Error!', 'Failed to load hotel details', 'error');
    }
  }

  // Function to fetch vendors
  async function fetchVendors() {
    try {
      const response = await fetch('https://backend.bninewdelhi.com/api/getAllVendors');
      if (!response.ok) throw new Error('Failed to fetch vendors');
      return await response.json();
    } catch (error) {
      console.error('Error fetching vendors:', error);
      throw error;
    }
  }

  // Function to populate vendor dropdown based on selected chapter
  async function populateVendorDropdown(selectedChapterId = null, showAll = false) {
    try {
      const vendors = await fetchVendors();
      const vendorDropdown = document.getElementById('vendor');
      const currentVendorSelection = vendorDropdown.value; // Store current selection
      
      // Clear existing options
      vendorDropdown.innerHTML = '<option value="">Select Vendor</option>';
      
      // Add "All Vendors" option only if a chapter is selected
      if (selectedChapterId && selectedChapterId !== 'all') {
        vendorDropdown.innerHTML += '<option value="all">All Vendors</option>';
      }
      vendorDropdown.innerHTML += '<option disabled>──────────</option>';
      
      if (showAll) {
        // Show all vendors, potentially grouped
        console.log('Populating with ALL vendors');
        const chapterVendors = selectedChapterId && selectedChapterId !== 'all' 
          ? vendors.filter(v => v.chapter_id === parseInt(selectedChapterId)) 
          : [];
        const otherVendors = vendors.filter(v => !chapterVendors.some(cv => cv.vendor_id === v.vendor_id));

        // Add Chapter Vendors first if a chapter was selected
        if (chapterVendors.length > 0) {
          const optgroup = document.createElement('optgroup');
          optgroup.label = 'Chapter Vendors';
          chapterVendors.sort((a, b) => a.vendor_name.localeCompare(b.vendor_name));
          chapterVendors.forEach(vendor => {
            const option = document.createElement('option');
            option.value = vendor.vendor_id;
            option.textContent = `${vendor.vendor_name} - ${vendor.vendor_company_name}`;
            optgroup.appendChild(option);
          });
          vendorDropdown.appendChild(optgroup);
        }

        // Add Other Vendors
        if (otherVendors.length > 0) {
          const otherOptgroup = document.createElement('optgroup');
          otherOptgroup.label = chapterVendors.length > 0 ? 'Other Vendors' : 'All Vendors'; // Adjust label if no chapter vendors
          otherVendors.sort((a, b) => a.vendor_name.localeCompare(b.vendor_name));
          otherVendors.forEach(vendor => {
            const option = document.createElement('option');
            option.value = vendor.vendor_id;
            option.textContent = `${vendor.vendor_name} - ${vendor.vendor_company_name}`;
            otherOptgroup.appendChild(option);
          });
          vendorDropdown.appendChild(otherOptgroup);
        }
        
      } else if (selectedChapterId && selectedChapterId !== 'all') {
        // Show only chapter vendors + "Show Others" option
        console.log(`Populating vendors for chapter: ${selectedChapterId}`);
        const chapterVendors = vendors.filter(vendor => 
          vendor.chapter_id === parseInt(selectedChapterId)
        );

        if (chapterVendors.length > 0) {
          const optgroup = document.createElement('optgroup');
          optgroup.label = 'Chapter Vendors';
          chapterVendors.sort((a, b) => a.vendor_name.localeCompare(b.vendor_name));
          chapterVendors.forEach(vendor => {
            const option = document.createElement('option');
            option.value = vendor.vendor_id;
            option.textContent = `${vendor.vendor_name} - ${vendor.vendor_company_name}`;
            optgroup.appendChild(option);
          });
          vendorDropdown.appendChild(optgroup);
        }

        // Check if there are vendors outside the current chapter
        const hasOtherVendors = vendors.some(v => v.chapter_id !== parseInt(selectedChapterId));

        if (hasOtherVendors) {
          const separator = document.createElement('option');
          separator.disabled = true;
          separator.textContent = '──────────';
          vendorDropdown.appendChild(separator);

          const showOthersOption = document.createElement('option');
          showOthersOption.value = 'show_others';
          showOthersOption.textContent = '➕ Show Other Chapter Vendors';
          vendorDropdown.appendChild(showOthersOption);
        } else if (chapterVendors.length === 0) {
          vendorDropdown.innerHTML += '<option disabled>No vendors found for this chapter.</option>';
        }

      } else {
        // Show all vendors (case when no chapter selected or "All Vendors" initially selected)
        console.log('Populating with all vendors (initial/no chapter)');
        vendors.sort((a, b) => a.vendor_name.localeCompare(b.vendor_name));
        vendors.forEach(vendor => {
          const option = document.createElement('option');
          option.value = vendor.vendor_id;
          option.textContent = `${vendor.vendor_name} - ${vendor.vendor_company_name}`;
          vendorDropdown.appendChild(option);
        });
      }

      // Restore selection if possible
      if (vendorDropdown.querySelector(`option[value="${currentVendorSelection}"]`)) {
          vendorDropdown.value = currentVendorSelection;
      }

    } catch (error) {
      console.error('Error populating vendor dropdown:', error);
      Swal.fire('Error!', 'Failed to load vendors', 'error');
    }
  }

  // Function to handle vendor selection
  async function handleVendorSelection(vendorId) {
    try {
      const vendors = await fetchVendors();
      const selectedVendor = vendors.find(vendor => vendor.vendor_id === parseInt(vendorId));
      
      if (selectedVendor) {
        // Populate vendor details fields
        document.getElementById('vendor_company_name').value = selectedVendor.vendor_company_name || 'N/A';
        document.getElementById('vendor_company_address').value = selectedVendor.vendor_company_address || 'N/A';
        document.getElementById('vendor_phone').value = selectedVendor.phone_number || 'N/A';
        document.getElementById('vendor_email').value = selectedVendor.email_id || 'N/A';
        document.getElementById('vendor_company_gst').value = selectedVendor.vendor_company_gst || 'N/A';
        document.getElementById('vendor_bank_name').value = selectedVendor.vendor_bank_name || 'N/A';
        document.getElementById('vendor_account').value = selectedVendor.vendor_account || 'N/A';
        document.getElementById('vendor_ifsc_code').value = selectedVendor.vendor_ifsc_code || 'N/A';
        document.getElementById('vendor_account_type').value = selectedVendor.vendor_account_type || 'N/A';
        
        // Show vendor details section
        document.getElementById('vendorDetailsSection').style.display = 'flex';
      }
    } catch (error) {
      console.error('Error handling vendor selection:', error);
      Swal.fire('Error!', 'Failed to load vendor details', 'error');
    }
  }

  // Add event listener for expense type change
  document.getElementById('expense_type').addEventListener('change', async function() {
    const selectedOption = this.options[this.selectedIndex];
    const hotelSection = document.getElementById('hotelSection');
    const hotelDetailsSection = document.getElementById('hotelDetailsSection');
    const vendorSection = document.getElementById('vendorSection');
    const vendorDetailsSection = document.getElementById('vendorDetailsSection');
    
    // Check if the selected expense type is "Meeting Hotel Expenses"
    if (selectedOption.textContent === 'Meeting Hotel Expenses') {
      console.log('Meeting Hotel Expenses selected - showing hotel section');
      await populateHotelDropdown();
      hotelSection.style.display = 'block';
      vendorSection.style.display = 'none';
      vendorDetailsSection.style.display = 'none';
    } else {
      console.log('Different expense type selected - showing vendor section');
      const selectedChapterId = document.getElementById('chapter').value;
      await populateVendorDropdown(selectedChapterId, false);
      hotelSection.style.display = 'none';
      hotelDetailsSection.style.display = 'none';
      vendorSection.style.display = 'block';
    }
  });

  // Add event listener for hotel selection
  document.getElementById('hotel').addEventListener('change', function() {
    const selectedHotelId = this.value;
    const hotelDetailsSection = document.getElementById('hotelDetailsSection');
    
    if (selectedHotelId) {
      handleHotelSelection(selectedHotelId);
    } else {
      hotelDetailsSection.style.display = 'none';
    }
  });

  // Add event listener for vendor selection
  document.getElementById('vendor').addEventListener('change', function() {
    const selectedVendorId = this.value;
    const vendorDetailsSection = document.getElementById('vendorDetailsSection');
    
    if (selectedVendorId === 'show_others') {
      // Show other chapter vendors
      const selectedChapterId = document.getElementById('chapter').value;
      // Call populateVendorDropdown to show all vendors, grouped
      populateVendorDropdown(selectedChapterId, true);
      // Don't reset selection, let the full list show
    } else if (selectedVendorId === 'all') {
      // Show all vendors (ungrouped)
      populateVendorDropdown(null, true);
      vendorDetailsSection.style.display = 'none';
    } else if (selectedVendorId && selectedVendorId !== 'all') {
      handleVendorSelection(selectedVendorId);
    } else {
      vendorDetailsSection.style.display = 'none';
    }
  });

  // Add event listener for chapter selection
  document.getElementById('chapter').addEventListener('change', function() {
    const selectedChapterId = this.value;
    const expenseType = document.getElementById('expense_type');
    const selectedExpenseType = expenseType.options[expenseType.selectedIndex].textContent;
    const vendorDetailsSection = document.getElementById('vendorDetailsSection');

    // Only update vendor dropdown if expense type is not "Meeting Hotel Expenses"
    if (selectedExpenseType !== 'Meeting Hotel Expenses') {
      populateVendorDropdown(selectedChapterId, false); // Revert to chapter-specific view
      // Hide vendor details when chapter changes
      vendorDetailsSection.style.display = 'none';
    }
  });

  // Add this new code to prefill submitted_by field
  try {
    const response = await fetch("https://backend.bninewdelhi.com/api/chapters");
    const chapters = await response.json();
    
    // Find matching chapter by email
    const matchingChapter = chapters.find(
  chapter =>
    chapter.email_id === userEmail ||
    chapter.vice_president_mail === userEmail ||
    chapter.president_mail === userEmail ||
    chapter.treasurer_mail === userEmail
);

    
    if (matchingChapter) {
      console.log('Found matching chapter:', matchingChapter.chapter_name);
      // Prefill the submitted_by field and make it read-only
      const submittedByField = document.getElementById('submitted_by');
      submittedByField.value = matchingChapter.chapter_name;
      submittedByField.readOnly = true; // Make the field read-only
      submittedByField.style.backgroundColor = '#e9ecef'; // Optional: Add a background color to indicate it's read-only
    } else {
      console.log('No matching chapter found for email:', userEmail);
    }
  } catch (error) {
    console.error('Error prefilling submitted_by field:', error);
  }

  // Fetch data for "Type of Expense"
  try {
    const response = await fetch("https://backend.bninewdelhi.com/api/expenseType");
    const data = await response.json();
    console.log("Expense Types:", data);
    const expenseTypeDropdown = document.getElementById("expense_type");

    // Clear existing options
    expenseTypeDropdown.innerHTML = '<option value="">Select</option>';

    // Sort data by expense_name in ascending order
    data.sort((a, b) => a.expense_name.localeCompare(b.expense_name));

    // Populate dropdown with sorted data
    data.forEach((expense) => {
      const option = document.createElement("option");
      option.value = expense.expense_id;
      option.textContent = expense.expense_name;
      expenseTypeDropdown.appendChild(option);
    });
  } catch (error) {
    console.error("Error fetching expense types:", error);
  }

  // Fetch and populate chapters dropdown
  try {
    console.log('Fetching chapters data...');
    const response = await fetch("https://backend.bninewdelhi.com/api/chapters");
    const chapters = await response.json();
    console.log("All available chapters:", chapters);

    const chapterDropdown = document.getElementById("chapter");
    chapterDropdown.innerHTML = '<option value="">Select Chapter</option>';

    // Filter chapters based on login type and email
    let filteredChapters = [];
    if (loginType === 'ro_admin') {
      console.log('User is RO Admin - showing all chapters');
      filteredChapters = chapters;
    } else {
      console.log('User is not RO Admin - filtering chapters by email');
      filteredChapters = chapters.filter(
  chapter =>
    chapter.email_id === userEmail ||
    chapter.vice_president_mail === userEmail ||
    chapter.president_mail === userEmail ||
    chapter.treasurer_mail === userEmail
);

      console.log('Filtered chapters by email:', filteredChapters);
    }

    // Sort filtered chapters by name
    filteredChapters.sort((a, b) => a.chapter_name.localeCompare(b.chapter_name));
    console.log('Sorted chapters to display:', filteredChapters);

    // Populate dropdown with filtered chapters
    if (filteredChapters.length === 1) {
      const chapter = filteredChapters[0];
      const option = document.createElement("option");
      option.value = chapter.chapter_id;
      option.textContent = chapter.chapter_name;
      option.selected = true;
      chapterDropdown.appendChild(option);
      chapterDropdown.disabled = true; // Disable the dropdown
      console.log(`Preselected chapter: ${chapter.chapter_name} (ID: ${chapter.chapter_id})`);
    } else if (filteredChapters.length > 0) {
      filteredChapters.forEach((chapter) => {
        const option = document.createElement("option");
        option.value = chapter.chapter_id;
        option.textContent = chapter.chapter_name;
        chapterDropdown.appendChild(option);
        console.log(`Added chapter to dropdown: ${chapter.chapter_name} (ID: ${chapter.chapter_id})`);
      });
    } else {
      console.log('No chapters available for this user');
      const option = document.createElement("option");
      option.value = "";
      option.textContent = "No chapters available";
      chapterDropdown.appendChild(option);
    }

  } catch (error) {
    console.error("Error in chapter dropdown population:", error);
    const chapterDropdown = document.getElementById("chapter");
    chapterDropdown.innerHTML = '<option value="">Error loading chapters</option>';
  }

  const addExpenseButton = document.getElementById("addExpenseButton");

  // GST Calculation Logic
  const withGSTCheckbox = document.getElementById('withGST');
  const amountInput = document.getElementById('amount');
  const gstCalculationFields = document.getElementById('gstCalculationFields');
  const gstPercentageSelect = document.getElementById('gstPercentage');
  const gstAmountInput = document.getElementById('gstAmount');
  const totalAmountInput = document.getElementById('totalAmount');

  // Function to calculate GST and total
  function calculateGST() {
    const amount = parseFloat(amountInput.value) || 0;
    const gstPercentage = parseFloat(gstPercentageSelect.value) / 100;

    if (withGSTCheckbox.checked) {
      const gstAmount = amount * gstPercentage;
      const totalAmount = Math.round(amount + gstAmount);

      // Update the fields with formatted numbers
      gstAmountInput.value = gstAmount.toFixed(2);
      totalAmountInput.value = totalAmount.toFixed(2);
      gstCalculationFields.style.display = 'block';
    } else {
      gstCalculationFields.style.display = 'none';
      gstAmountInput.value = '';
      totalAmountInput.value = '';
    }
  }

  // Add event listeners for GST calculation
  withGSTCheckbox.addEventListener('change', calculateGST);
  amountInput.addEventListener('input', function() {
    if (withGSTCheckbox.checked) {
      calculateGST();
    }
  });
  gstPercentageSelect.addEventListener('change', function() {
    if (withGSTCheckbox.checked) {
      calculateGST();
    }
  });

  addExpenseButton.addEventListener("click", async function () {
    try {
      // Validation - Check all required fields
      const amountValue = document.getElementById('amount').value.trim();
      const paymentStatusValue = document.getElementById('payment_status').value;
      const paymentModeValue = document.getElementById('payment_mode').value;
      const expenseTypeValue = document.getElementById('expense_type').value;
      const chapterValue = document.getElementById('chapter').value;
      const descriptionValue = document.getElementById('description').value.trim();
      const billDateValue = document.getElementById('bill_date').value;
      const billFileValue = document.getElementById('upload_bill').files[0];
      const submittedByValue = document.getElementById('submitted_by').value.trim();

      // Create array to store missing fields
      const missingFields = [];

      // Check each required field
      if (!amountValue) missingFields.push('Base Amount');
      if (!paymentStatusValue) missingFields.push('Payment Status');
      if (!paymentModeValue) missingFields.push('Mode of Payment');
      if (!expenseTypeValue) missingFields.push('Type of Expense');
      if (!chapterValue) missingFields.push('Chapter');
      if (!billDateValue) missingFields.push('Bill Date');
      if (!billFileValue) missingFields.push('Bill Upload');
      if (!submittedByValue) missingFields.push('Submitted By');

      // If any fields are missing, show error message
      if (missingFields.length > 0) {
        let errorMessage = 'Please fill the following required fields: ';
        
        if (missingFields.length === 1) {
          errorMessage = `Please fill ${missingFields[0]}`;
        } else if (missingFields.length === 2) {
          errorMessage = `Please fill ${missingFields[0]} and ${missingFields[1]}`;
        } else {
          errorMessage = `Please fill ${missingFields.slice(0, -1).join(', ')} and ${missingFields[missingFields.length - 1]}`;
        }

        Swal.fire({
          title: 'Required Fields Missing!',
          text: errorMessage,
          icon: 'warning',
          confirmButtonText: 'OK',
          confirmButtonColor: '#dc3545'
        });
        return;
      }

      const form = document.getElementById("addExpenseForm");
      const formData = new FormData();

      // Get selected chapter and convert ID to number
      const selectedChapter = document.getElementById("chapter");
      const selectedChapterId = selectedChapter.value ? parseInt(selectedChapter.value, 10) : null;
      
      // Add basic form fields
      formData.append('expense_type', document.getElementById('expense_type').value || '');
      formData.append('submitted_by', document.getElementById('submitted_by').value || '');
      formData.append('description', document.getElementById('description').value || '');
      formData.append('chapter_id', selectedChapterId || '');
      formData.append('amount', document.getElementById('amount').value || '');
      formData.append('payment_status', document.getElementById('payment_status').value || '');
      formData.append('bill_date', document.getElementById('bill_date').value || '');
      formData.append('bill_no', document.getElementById('bill_no').value || '');
      formData.append('transaction_no', document.getElementById('transaction_no').value || '');
      formData.append('payment_mode', document.getElementById('payment_mode').value || '');
      formData.append('expense_entry_date', document.getElementById('expense_entry_date').getAttribute('data-db-format'));

      // Add files if they exist
      const billFile = document.getElementById('upload_bill').files[0];
      if (billFile) {
        formData.append('upload_bill', billFile);
      }
      const receiptFile = document.getElementById('upload_receipt').files[0];
      if (receiptFile) {
        formData.append('upload_receipt', receiptFile);
      }

      // Add GST details if applicable
      const withGST = document.getElementById('withGST').checked;
      formData.append('withGST', withGST);
      
      if (withGST) {
        const gstPercentage = document.getElementById('gstPercentage').value;
        const gstAmount = document.getElementById('gstAmount').value;
        const totalAmount = document.getElementById('totalAmount').value;
        
        formData.append('gstPercentage', gstPercentage);
        formData.append('gstAmount', gstAmount);
        formData.append('totalAmount', totalAmount);
      } else {
        formData.append('totalAmount', document.getElementById('amount').value || '');
      }

      // Add vendor or hotel details based on expense type
      const expenseType = document.getElementById('expense_type');
      const selectedExpenseType = expenseType.options[expenseType.selectedIndex]?.textContent;
      
      if (selectedExpenseType === 'Meeting Hotel Expenses') {
        const selectedHotel = document.getElementById('hotel').value;
        if (selectedHotel) {
          formData.append('hotel_id', selectedHotel);
        }
      } else {
        const selectedVendor = document.getElementById('vendor').value;
        if (selectedVendor && selectedVendor !== 'show_others') {
          formData.append('vendor_id', selectedVendor);
        }
      }

      // Debug logging
      console.log('Form Data Object:', {
        expense_type: expenseType.value ? parseInt(expenseType.value, 10) : null,
        expense_type_name: selectedExpenseType,
        submitted_by: document.getElementById('submitted_by').value,
        description: document.getElementById('description').value,
        chapter_id: selectedChapterId,
        chapter_name: selectedChapter.options[selectedChapter.selectedIndex]?.text,
        amount: document.getElementById('amount').value,
        withGST: withGST,
        payment_status: document.getElementById('payment_status').value,
        bill_date: document.getElementById('bill_date').value,
        bill_no: document.getElementById('bill_no').value,
        transaction_no: document.getElementById('transaction_no').value,
        upload_bill: billFile ? billFile.name : 'No file selected',
        upload_receipt: receiptFile ? receiptFile.name : 'No file selected',
        payment_mode: document.getElementById('payment_mode').value
      });

      // Show loader and make API call
      showLoader();
      const response = await fetch("https://backend.bninewdelhi.com/api/addExpense", {
        method: "POST",
        body: formData,
      });

      if (response.ok) {
        const data = await response.json();
        console.log('API Response:', data);
        
        Swal.fire({
          title: 'Success!',
          text: data.message,
          icon: 'success',
          confirmButtonText: 'OK'
        }).then((result) => {
          if (result.isConfirmed) {
            window.location.href = '/exp/manage-expenses';
          }
        });
        form.reset();
      } else {
        const errorResponse = await response.json();
        console.error('API Error Response:', errorResponse);
        Swal.fire('Failed!', errorResponse.message || 'Failed to add expense', 'error');
      }
    } catch (error) {
      console.error('Error adding expense:', error);
      Swal.fire('Error!', 'Failed to add expense. Please try again.', 'error');
    } finally {
      hideLoader();
    }
  });

  // Add New Vendor Button Click Handler
  document.getElementById('addNewVendorBtn').addEventListener('click', function() {
    // Get the selected chapter ID
    const selectedChapterId = document.getElementById('chapter').value;
    
    if (!selectedChapterId) {
      Swal.fire('Error!', 'Please select a chapter first', 'error');
      return;
    }
    
    // Show the modal
    const vendorModal = new bootstrap.Modal(document.getElementById('addVendorModal'));
    vendorModal.show();
  });

  // Save Vendor Button Click Handler
  document.getElementById('saveVendorBtn').addEventListener('click', async function() {
    try {
      // Get the selected chapter ID
      const selectedChapterId = document.getElementById('chapter').value;
      
      if (!selectedChapterId) {
        Swal.fire('Error!', 'Please select a chapter first', 'error');
        return;
      }

      // Get all form fields and ensure proper data types
      const vendorData = {
        vendor_name: document.getElementById('vendor_name').value.trim(),
        vendor_company_name: document.getElementById('vendor_company_name_modal').value.trim(),
        vendor_company_address: document.getElementById('vendor_company_address_modal').value.trim(),
        vendor_company_gst: document.getElementById('vendor_company_gst_modal').value.trim() || 'NA',
        phone_number: document.getElementById('phone_number').value.trim(),
        email_id: document.getElementById('email_id').value.trim(),
        vendor_bank_name: document.getElementById('vendor_bank_name_modal').value.trim(),
        vendor_account: document.getElementById('vendor_account_modal').value.trim(),
        vendor_ifsc_code: document.getElementById('vendor_ifsc_code_modal').value.trim(),
        vendor_account_type: document.getElementById('vendor_account_type_modal').value,
        vendor_status: 'active', // Set default status
        chapter_id: selectedChapterId
      };

      // Debug log the collected data
      console.log('Collected vendor data:', vendorData);

      // Validate required fields
      const requiredFields = {
        'Vendor Name': vendorData.vendor_name,
        'Company Name': vendorData.vendor_company_name,
        'Company Address': vendorData.vendor_company_address,
        'Phone Number': vendorData.phone_number,
        'Email': vendorData.email_id,
        'Bank Name': vendorData.vendor_bank_name,
        'Account Number': vendorData.vendor_account,
        'IFSC Code': vendorData.vendor_ifsc_code,
        'Account Type': vendorData.vendor_account_type
      };

      // Check for empty required fields
      const emptyFields = Object.entries(requiredFields)
        .filter(([_, value]) => !value)
        .map(([key]) => key);

      if (emptyFields.length > 0) {
        Swal.fire('Error!', `Please fill in the following required fields: ${emptyFields.join(', ')}`, 'error');
        return;
      }

      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(vendorData.email_id)) {
        Swal.fire('Error!', 'Please enter a valid email address', 'error');
        return;
      }

      // Validate phone number (assuming Indian format)
      const phoneRegex = /^[6-9]\d{9}$/;
      if (!phoneRegex.test(vendorData.phone_number)) {
        Swal.fire('Error!', 'Please enter a valid 10-digit phone number', 'error');
        return;
      }

      showLoader();

      // Send data as JSON instead of FormData
      const response = await fetch('https://backend.bninewdelhi.com/api/addVendor', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(vendorData)
      });

      const result = await response.json();
      
      if (response.ok) {
        // Close the modal
        const vendorModal = bootstrap.Modal.getInstance(document.getElementById('addVendorModal'));
        vendorModal.hide();
        
        // Show success message
        Swal.fire({
          title: 'Success!',
          text: result.message,
          icon: 'success',
          confirmButtonText: 'OK'
        });
        
        // Reset the form
        document.getElementById('addVendorForm').reset();
        
        // Refresh vendor dropdown with new vendor
        await populateVendorDropdown(selectedChapterId);
      } else {
        throw new Error(result.message || 'Failed to add vendor');
      }
    } catch (error) {
      console.error('Error adding vendor:', error);
      Swal.fire('Error!', error.message || 'Failed to add vendor. Please try again.', 'error');
    } finally {
      hideLoader();
    }
  });

  // Add click handler for view expense types button
  document.getElementById('viewExpenseBtn').addEventListener('click', async function() {
    try {
      const response = await fetch('https://backend.bninewdelhi.com/api/expenseType');
      const expenseTypes = await response.json();
      
      // Sort expense types alphabetically by name
      expenseTypes.sort((a, b) => a.expense_name.localeCompare(b.expense_name));

      Swal.fire({
        title: '<div class="d-flex align-items-center gap-2"><i class="ri-file-list-3-line text-primary"></i><span>Expense Types</span></div>',
        html: `
          <div class="expense-types-container">
            <div class="expense-types-header mb-3">
              <i class="ri-information-line text-primary"></i>
              Total Expense Types: <span class="badge bg-primary">${expenseTypes.length}</span>
            </div>
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th><i class="ri-hashtag text-primary"></i> S.No</th>
                    <th><i class="ri-file-text-line text-primary"></i> Name</th>
                    <th><i class="ri-toggle-line text-primary"></i> Status</th>
                    <th><i class="ri-settings-4-line text-primary"></i> Actions</th>
                  </tr>
                </thead>
                <tbody>
                  ${expenseTypes.map((type, index) => `
                    <tr>
                      <td>${index + 1}</td>
                      <td>${type.expense_name}</td>
                      <td>
                        <span class="badge ${type.expense_status === 'active' ? 'bg-success' : 'bg-danger'}">
                          ${type.expense_status === 'active' ? 'Active' : 'Inactive'}
                        </span>
                      </td>
                      <td>
                        <div class="action-buttons">
                          <button class="btn btn-sm edit-btn" data-id="${type.expense_id}" data-tooltip="Edit Expense Type">
                            <i class="ri-edit-line"></i>
                          </button>
                          <button class="btn btn-sm delete-btn" data-id="${type.expense_id}" data-tooltip="Delete Expense Type">
                            <i class="ri-delete-bin-line"></i>
                          </button>
                        </div>
                      </td>
                    </tr>
                  `).join('')}
                </tbody>
              </table>
            </div>
          </div>
        `,
        showCloseButton: true,
        showConfirmButton: false,
        width: '800px',
        customClass: {
          container: 'expense-types-modal',
          popup: 'expense-types-popup',
          content: 'expense-types-content'
        },
        didOpen: () => {
          // Add event listeners for edit and delete buttons
          document.querySelectorAll('.edit-btn').forEach(btn => {
            btn.addEventListener('click', async function() {
              const expenseId = this.dataset.id;
              const expenseName = this.closest('tr').querySelector('td:nth-child(2)').textContent;
              const expenseStatus = this.closest('tr').querySelector('td:nth-child(3) .badge').textContent.toLowerCase();

              const result = await Swal.fire({
                title: '<div style="display: flex; align-items: center; gap: 10px;"><i class="ri-edit-line" style="font-size: 24px; color: #2563eb;"></i><span style="color: #2563eb; font-weight: 600;">Edit Expense Type</span></div>',
                html: `
                  <div class="expense-type-form" style="text-align: left; padding: 20px;">
                    <div class="form-group mb-4" style="position: relative;">
                      <label for="editExpenseType" class="form-label" style="display: flex; align-items: center; gap: 8px; color: #1e293b; font-weight: 500; margin-bottom: 8px;">
                        <i class="ri-money-dollar-circle-line" style="color: #2563eb;"></i>
                        Expense Type
                      </label>
                      <div style="position: relative;">
                        <input type="text" id="editExpenseType" class="form-control" 
                          style="padding: 12px; border-radius: 8px; border: 1px solid #e2e8f0; transition: all 0.3s ease;"
                          value="${expenseName}">
                        <div class="input-focus-effect"></div>
                      </div>
                    </div>
                    
                    <div class="form-group mb-4" style="position: relative;">
                      <label for="editStatus" class="form-label" style="display: flex; align-items: center; gap: 8px; color: #1e293b; font-weight: 500; margin-bottom: 8px;">
                        <i class="ri-toggle-line" style="color: #2563eb;"></i>
                        Status
                      </label>
                      <select id="editStatus" class="form-control" 
                        style="padding: 12px; border-radius: 8px; border: 1px solid #e2e8f0; transition: all 0.3s ease; cursor: pointer;">
                        <option value="active" ${expenseStatus === 'active' ? 'selected' : ''}>Active</option>
                        <option value="inactive" ${expenseStatus === 'inactive' ? 'selected' : ''}>Inactive</option>
                      </select>
                    </div>
                  </div>
                `,
                showCancelButton: true,
                confirmButtonText: '<i class="ri-save-line me-1"></i> Update',
                cancelButtonText: '<i class="ri-close-line me-1"></i> Cancel',
                focusConfirm: false,
                customClass: {
                  container: 'edit-expense-type-popup',
                  popup: 'expense-type-popup',
                  title: 'expense-type-title',
                  htmlContainer: 'expense-type-html',
                  confirmButton: 'btn btn-primary',
                  cancelButton: 'btn btn-light'
                },
                buttonsStyling: false,
                showClass: {
                  popup: 'animate__animated animate__fadeInDown animate__faster'
                },
                hideClass: {
                  popup: 'animate__animated animate__fadeOutUp animate__faster'
                },
                preConfirm: () => {
                  const expenseType = document.getElementById('editExpenseType').value;
                  const status = document.getElementById('editStatus').value;

                  if (!expenseType) {
                    Swal.showValidationMessage(`
                      <div style="display: flex; align-items: center; gap: 8px; color: #dc2626;">
                        <i class="ri-error-warning-line"></i>
                        <span>Expense Type is required</span>
                      </div>
                    `);
                    return false;
                  }
                  return { expenseType, status };
                }
              });

              if (result.isConfirmed) {
                try {
                  showLoader();
                  const response = await fetch('https://backend.bninewdelhi.com/api/updateExpenseType', {
                    method: 'PUT',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                      expense_id: expenseId,
                      expense_name: result.value.expenseType,
                      expense_status: result.value.status
                    }),
                  });

                  if (response.ok) {
                    const data = await response.json();
                    await Swal.fire({
                      icon: 'success',
                      title: '<div style="display: flex; align-items: center; gap: 10px;"><i class="ri-checkbox-circle-line" style="font-size: 24px; color: #16a34a;"></i><span style="color: #16a34a; font-weight: 600;">Success!</span></div>',
                      html: `
                        <div style="text-align: center; padding: 20px;">
                          <p style="color: #1e293b; margin-bottom: 0;">${data.message || 'Expense type updated successfully'}</p>
                        </div>
                      `,
                      timer: 2000,
                      showConfirmButton: false,
                      customClass: {
                        popup: 'animate__animated animate__fadeInDown animate__faster'
                      }
                    });
                    
                    // Close the current modal and reopen with updated data
                    Swal.close();
                    document.getElementById('viewExpenseBtn').click();
                  } else {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to update expense type');
                  }
                } catch (error) {
                  console.error('Error updating expense type:', error);
                  Swal.fire({
                    icon: 'error',
                    title: '<div style="display: flex; align-items: center; gap: 10px;"><i class="ri-error-warning-line" style="font-size: 24px; color: #dc2626;"></i><span style="color: #dc2626; font-weight: 600;">Error!</span></div>',
                    html: `
                      <div style="text-align: center; padding: 20px;">
                        <p style="color: #1e293b; margin-bottom: 0;">${error.message || 'Failed to update expense type'}</p>
                      </div>
                    `,
                    customClass: {
                      popup: 'animate__animated animate__fadeInDown animate__faster'
                    }
                  });
                } finally {
                  hideLoader();
                }
              }
            });
          });

          document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', async function() {
              const expenseId = this.dataset.id;
              const expenseName = this.closest('tr').querySelector('td:nth-child(2)').textContent;

              const result = await Swal.fire({
                title: '<div style="display: flex; align-items: center; gap: 10px;"><i class="ri-delete-bin-line" style="font-size: 24px; color: #dc2626;"></i><span style="color: #dc2626; font-weight: 600;">Delete Expense Type</span></div>',
                html: `
                  <div style="text-align: center; padding: 20px;">
                    <p style="color: #1e293b; margin-bottom: 0;">Are you sure you want to delete the expense type "<strong>${expenseName}</strong>"?</p>
                  </div>
                `,
                showCancelButton: true,
                confirmButtonText: '<i class="ri-delete-bin-line me-1"></i> Delete',
                cancelButtonText: '<i class="ri-close-line me-1"></i> Cancel',
                confirmButtonColor: '#dc2626',
                cancelButtonColor: '#6b7280',
                customClass: {
                  container: 'delete-expense-type-popup',
                  popup: 'expense-type-popup',
                  title: 'expense-type-title',
                  htmlContainer: 'expense-type-html',
                  confirmButton: 'btn btn-danger',
                  cancelButton: 'btn btn-light'
                },
                buttonsStyling: false,
                showClass: {
                  popup: 'animate__animated animate__fadeInDown animate__faster'
                },
                hideClass: {
                  popup: 'animate__animated animate__fadeOutUp animate__faster'
                }
              });

              if (result.isConfirmed) {
                try {
                  showLoader();
                  const response = await fetch('https://backend.bninewdelhi.com/api/deleteExpenseType', {
                    method: 'DELETE',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                      expense_id: expenseId
                    }),
                  });

                  if (response.ok) {
                    const data = await response.json();
                    await Swal.fire({
                      icon: 'success',
                      title: '<div style="display: flex; align-items: center; gap: 10px;"><i class="ri-checkbox-circle-line" style="font-size: 24px; color: #16a34a;"></i><span style="color: #16a34a; font-weight: 600;">Success!</span></div>',
                      html: `
                        <div style="text-align: center; padding: 20px;">
                          <p style="color: #1e293b; margin-bottom: 0;">${data.message || 'Expense type deleted successfully'}</p>
                        </div>
                      `,
                      timer: 2000,
                      showConfirmButton: false,
                      customClass: {
                        popup: 'animate__animated animate__fadeInDown animate__faster'
                      }
                    });
                    
                    // Close the current modal and reopen with updated data
                    Swal.close();
                    document.getElementById('viewExpenseBtn').click();
                  } else {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to delete expense type');
                  }
                } catch (error) {
                  console.error('Error deleting expense type:', error);
                  Swal.fire({
                    icon: 'error',
                    title: '<div style="display: flex; align-items: center; gap: 10px;"><i class="ri-error-warning-line" style="font-size: 24px; color: #dc2626;"></i><span style="color: #dc2626; font-weight: 600;">Error!</span></div>',
                    html: `
                      <div style="text-align: center; padding: 20px;">
                        <p style="color: #1e293b; margin-bottom: 0;">${error.message || 'Failed to delete expense type'}</p>
                      </div>
                    `,
                    customClass: {
                      popup: 'animate__animated animate__fadeInDown animate__faster'
                    }
                  });
                } finally {
                  hideLoader();
                }
              }
            });
          });
        }
      });

      // Add custom styles
      const style = document.createElement('style');
      style.textContent = `
        .expense-types-popup {
          border-radius: 15px;
          box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }
        
        .expense-types-content {
          padding: 20px;
        }
        
        .expense-types-header {
          background-color: #f8fafc;
          padding: 15px;
          border-radius: 8px;
          display: flex;
          align-items: center;
          gap: 10px;
          font-size: 1.1em;
          margin-bottom: 20px;
          border: 1px solid #e2e8f0;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        
        .table {
          margin-top: 15px;
          border-collapse: separate;
          border-spacing: 0;
          width: 100%;
          background: white;
          border-radius: 10px;
          overflow: hidden;
          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }
        
        .table th {
          background-color: #f8fafc;
          padding: 15px;
          font-weight: 600;
          border-bottom: 2px solid #e2e8f0;
          color: #1e293b;
          text-transform: uppercase;
          font-size: 0.85em;
          letter-spacing: 0.5px;
        }
        
        .table td {
          padding: 15px;
          vertical-align: middle;
          border-bottom: 1px solid #e2e8f0;
          color: #475569;
          font-size: 0.95em;
        }
        
        .table tbody tr {
          transition: all 0.2s ease;
        }
        
        .table tbody tr:hover {
          background-color: #f8fafc;
          transform: translateY(-1px);
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        
        .badge {
          padding: 8px 12px;
          font-weight: 500;
          border-radius: 6px;
          font-size: 0.85em;
          letter-spacing: 0.3px;
          text-transform: uppercase;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        
        .badge.bg-success {
          background-color: #dcfce7 !important;
          color: #16a34a;
          border: 1px solid #86efac;
        }
        
        .badge.bg-danger {
          background-color: #fee2e2 !important;
          color: #dc2626;
          border: 1px solid #fecaca;
        }
        
        .action-buttons {
          display: flex;
          gap: 8px;
          justify-content: center;
        }
        
        .edit-btn, .delete-btn {
          padding: 8px;
          border-radius: 8px;
          transition: all 0.3s ease;
          border: 1px solid transparent;
          display: inline-flex;
          align-items: center;
          justify-content: center;
          width: 36px;
          height: 36px;
        }
        
        .edit-btn {
          background-color: #eff6ff;
          color: #2563eb;
          border-color: #bfdbfe;
        }
        
        .edit-btn:hover {
          background-color: #2563eb;
          color: white;
          transform: translateY(-2px);
          box-shadow: 0 4px 6px rgba(37, 99, 235, 0.2);
        }
        
        .delete-btn {
          background-color: #fef2f2;
          color: #dc2626;
          border-color: #fecaca;
        }
        
        .delete-btn:hover {
          background-color: #dc2626;
          color: white;
          transform: translateY(-2px);
          box-shadow: 0 4px 6px rgba(220, 38, 38, 0.2);
        }
        
        .table-responsive {
          max-height: 400px;
          overflow-y: auto;
          scrollbar-width: thin;
          scrollbar-color: #cbd5e1 #f1f5f9;
          border-radius: 10px;
          padding: 2px;
        }
        
        .table-responsive::-webkit-scrollbar {
          width: 6px;
        }
        
        .table-responsive::-webkit-scrollbar-track {
          background: #f1f5f9;
          border-radius: 3px;
        }
        
        .table-responsive::-webkit-scrollbar-thumb {
          background-color: #cbd5e1;
          border-radius: 3px;
        }
        
        .table-responsive::-webkit-scrollbar-thumb:hover {
          background-color: #94a3b8;
        }

        /* Add hover effect for table rows */
        .table tbody tr {
          position: relative;
          overflow: hidden;
        }

        .table tbody tr::after {
          content: '';
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
          transform: translateX(-100%);
          transition: transform 0.6s ease;
        }

        .table tbody tr:hover::after {
          transform: translateX(100%);
        }

        /* Add subtle animation for action buttons */
        .edit-btn i, .delete-btn i {
          transition: transform 0.3s ease;
        }

        .edit-btn:hover i {
          transform: scale(1.1);
        }

        .delete-btn:hover i {
          transform: scale(1.1);
        }

        /* Add tooltip styles */
        .edit-btn, .delete-btn {
          position: relative;
        }

        .edit-btn::before, .delete-btn::before {
          content: attr(data-tooltip);
          position: absolute;
          bottom: 100%;
          left: 50%;
          transform: translateX(-50%);
          padding: 5px 10px;
          background-color: #1e293b;
          color: white;
          font-size: 12px;
          border-radius: 4px;
          white-space: nowrap;
          opacity: 0;
          visibility: hidden;
          transition: all 0.3s ease;
        }

        .edit-btn:hover::before, .delete-btn:hover::before {
          opacity: 1;
          visibility: visible;
          bottom: calc(100% + 5px);
        }
      `;
      document.head.appendChild(style);

    } catch (error) {
      console.error('Error fetching expense types:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error!',
        text: 'Failed to load expense types. Please try again.'
      });
    }
  });

  // Add event listener for Add New Expense Type button
  document.getElementById('addNewExpenseBtn').addEventListener('click', async function() {
    try {
      const result = await Swal.fire({
        title: '<div style="display: flex; align-items: center; gap: 10px;"><i class="ri-add-circle-line" style="font-size: 24px; color: #2563eb;"></i><span style="color: #2563eb; font-weight: 600;">Add New Expense Type</span></div>',
        html: `
          <div class="expense-type-form" style="text-align: left; padding: 20px;">
            <div class="form-group mb-4" style="position: relative;">
              <label for="expenseType" class="form-label" style="display: flex; align-items: center; gap: 8px; color: #1e293b; font-weight: 500; margin-bottom: 8px;">
                <i class="ri-money-dollar-circle-line" style="color: #2563eb;"></i>
                Expense Type
              </label>
              <div style="position: relative;">
                <input type="text" id="expenseType" class="form-control" 
                  style="padding: 12px; border-radius: 8px; border: 1px solid #e2e8f0; transition: all 0.3s ease;"
                  placeholder="Enter the expense type name">
                <div class="input-focus-effect"></div>
              </div>
            </div>
            
            <div class="form-group mb-4" style="position: relative;">
              <label for="status" class="form-label" style="display: flex; align-items: center; gap: 8px; color: #1e293b; font-weight: 500; margin-bottom: 8px;">
                <i class="ri-toggle-line" style="color: #2563eb;"></i>
                Status
              </label>
              <select id="status" class="form-control" 
                style="padding: 12px; border-radius: 8px; border: 1px solid #e2e8f0; transition: all 0.3s ease; cursor: pointer;">
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
              </select>
            </div>
          </div>
        `,
        showCancelButton: true,
        confirmButtonText: '<i class="ri-add-line me-1"></i> Add Expense Type',
        cancelButtonText: '<i class="ri-close-line me-1"></i> Cancel',
        focusConfirm: false,
        customClass: {
          container: 'add-expense-type-popup',
          popup: 'expense-type-popup',
          title: 'expense-type-title',
          htmlContainer: 'expense-type-html',
          confirmButton: 'btn btn-primary',
          cancelButton: 'btn btn-light'
        },
        buttonsStyling: false,
        showClass: {
          popup: 'animate__animated animate__fadeInDown animate__faster'
        },
        hideClass: {
          popup: 'animate__animated animate__fadeOutUp animate__faster'
        },
        didOpen: () => {
          // Add custom styles
          const style = document.createElement('style');
          style.textContent = `
            .expense-type-popup {
              border-radius: 15px;
              box-shadow: 0 10px 30px rgba(0,0,0,0.1);
              border: 1px solid #e2e8f0;
              max-width: 500px;
            }
            .expense-type-title {
              padding: 20px 20px 0;
              margin-bottom: 0;
            }
            .expense-type-html {
              padding: 0 20px;
            }
            .expense-type-form .form-control {
              width: 100%;
              font-size: 14px;
              color: #1e293b;
            }
            .expense-type-form .form-control:focus {
              border-color: #2563eb;
              box-shadow: 0 0 0 3px rgba(37,99,235,0.1);
            }
            .expense-type-form .form-control::placeholder {
              color: #94a3b8;
            }
            .expense-type-form select.form-control {
              appearance: none;
              background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%232563eb' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
              background-repeat: no-repeat;
              background-position: right 12px center;
              background-size: 16px;
              padding-right: 40px;
            }
            .btn {
              padding: 10px 20px;
              font-weight: 500;
              border-radius: 8px;
              transition: all 0.3s ease;
            }
            .btn-primary {
              background-color: #2563eb;
              border-color: #2563eb;
            }
            .btn-primary:hover {
              background-color: #1d4ed8;
              border-color: #1d4ed8;
              transform: translateY(-1px);
            }
            .btn-light {
              background-color: #f1f5f9;
              border-color: #e2e8f0;
              color: #64748b;
            }
            .btn-light:hover {
              background-color: #e2e8f0;
              color: #1e293b;
              transform: translateY(-1px);
            }
            .swal2-actions {
              gap: 10px;
              padding: 20px;
            }
            .input-focus-effect {
              position: absolute;
              bottom: 0;
              left: 0;
              width: 0;
              height: 2px;
              background-color: #2563eb;
              transition: width 0.3s ease;
            }
            .form-control:focus + .input-focus-effect {
              width: 100%;
            }
          `;
          document.head.appendChild(style);

          // Add input focus effects
          const inputs = document.querySelectorAll('.form-control');
          inputs.forEach(input => {
            input.addEventListener('focus', function() {
              this.parentElement.querySelector('.input-focus-effect').style.width = '100%';
            });
            input.addEventListener('blur', function() {
              if (!this.value) {
                this.parentElement.querySelector('.input-focus-effect').style.width = '0';
              }
            });
          });
        },
        preConfirm: () => {
          const expenseType = document.getElementById('expenseType').value;
          const status = document.getElementById('status').value;

          if (!expenseType) {
            Swal.showValidationMessage(`
              <div style="display: flex; align-items: center; gap: 8px; color: #dc2626;">
                <i class="ri-error-warning-line"></i>
                <span>Expense Type is required</span>
              </div>
            `);
            return false;
          }
          return { expenseType, status };
        }
      });

      if (result.isConfirmed) {
        const { expenseType, status } = result.value;
        
        showLoader();
        const response = await fetch('https://backend.bninewdelhi.com/api/expenseType', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ 
            expense_name: expenseType, 
            expense_status: status 
          }),
        });

        if (response.ok) {
          const data = await response.json();
          await Swal.fire({
            icon: 'success',
            title: '<div style="display: flex; align-items: center; gap: 10px;"><i class="ri-checkbox-circle-line" style="font-size: 24px; color: #16a34a;"></i><span style="color: #16a34a; font-weight: 600;">Success!</span></div>',
            html: `
              <div style="text-align: center; padding: 20px;">
                <p style="color: #1e293b; margin-bottom: 0;">${data.message || 'Expense type added successfully'}</p>
              </div>
            `,
            timer: 2000,
            showConfirmButton: false,
            customClass: {
              popup: 'animate__animated animate__fadeInDown animate__faster'
            }
          });
          
          // Refresh the expense type dropdown
          const expenseTypeResponse = await fetch("https://backend.bninewdelhi.com/api/expenseType");
          const expenseTypes = await expenseTypeResponse.json();
          
          const expenseTypeDropdown = document.getElementById("expense_type");
          expenseTypeDropdown.innerHTML = '<option value="">Select</option>';
          
          expenseTypes.sort((a, b) => a.expense_name.localeCompare(b.expense_name));
          expenseTypes.forEach((expense) => {
            const option = document.createElement("option");
            option.value = expense.expense_id;
            option.textContent = expense.expense_name;
            expenseTypeDropdown.appendChild(option);
          });
        } else {
          const errorData = await response.json();
          Swal.fire({
            icon: 'error',
            title: '<div style="display: flex; align-items: center; gap: 10px;"><i class="ri-error-warning-line" style="font-size: 24px; color: #dc2626;"></i><span style="color: #dc2626; font-weight: 600;">Error!</span></div>',
            html: `
              <div style="text-align: center; padding: 20px;">
                <p style="color: #1e293b; margin-bottom: 0;">${errorData.message || 'Failed to add expense type'}</p>
              </div>
            `,
            customClass: {
              popup: 'animate__animated animate__fadeInDown animate__faster'
            }
          });
        }
      }
    } catch (error) {
      console.error('Error adding expense type:', error);
      Swal.fire({
        icon: 'error',
        title: '<div style="display: flex; align-items: center; gap: 10px;"><i class="ri-error-warning-line" style="font-size: 24px; color: #dc2626;"></i><span style="color: #dc2626; font-weight: 600;">Error!</span></div>',
        html: `
          <div style="text-align: center; padding: 20px;">
            <p style="color: #1e293b; margin-bottom: 0;">Failed to add expense type. Please try again.</p>
          </div>
        `,
        customClass: {
          popup: 'animate__animated animate__fadeInDown animate__faster'
        }
      });
    } finally {
      hideLoader();
    }
  });
});

// Helper function to check if arrays are equal (for debugging)
// function arraysEqual(a, b) {
//   if (a === b) return true;
//   if (a == null || b == null) return false;
//   if (a.length !== b.length) return false;
//   for (let i = 0; i < a.length; ++i) {
//     if (a[i] !== b[i]) return false;
//   }
//   return true;
// }
</script>

<!-- <script src="../../assets/js/expense.js"></script> -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<%- include('../partials/footer') %>
