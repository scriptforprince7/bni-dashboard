<script src="/assets/js/tokenUtils.js"></script>
<script>
    (function checkAccess() {
        try {
            const loginType = getUserLoginType();
            if (loginType !== 'ro_admin') {
                document.body.innerHTML = `
                    <div style="display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f8f9fa;">
                        <div style="text-align: center; padding: 20px; background-color: white; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                            <h2 style="color: #dc3545; margin-bottom: 10px;">Unauthorized Access</h2>
                            <p style="color: #6c757d;">Only RO Admin can access this page.</p>
                            <a href="/" style="display: inline-block; margin-top: 15px; padding: 8px 16px; background-color: #0d6efd; color: white; text-decoration: none; border-radius: 4px;">Go to Home</a>
                        </div>
                    </div>
                `;
            }
        } catch (error) {
            console.error('Access check failed:', error);
            window.location.href = '/';
        }
    })();
</script>
<!-- header -->
<%- include('../partials/header') %>
<!-- end header -->

<!-- sidebar -->
<%- include('../partials/sidebar') %>
<!-- end sidebar -->

<style>
  /* Ensuring that the modal body has padding */
  .modal-body {
    padding: 20px;
  }

  /* Preventing the add button container from affecting layout */
  .add-button-container {
    margin-top: 10px;
    display: none;
  }

  /* Custom dropdown style */
  .custom-dropdown {
    position: relative;
    cursor: pointer;
    border: 1px solid #ccc;
    padding: 10px;
    border-radius: 5px;
  }

  .options {
    display: none;
    position: absolute;
    border: 1px solid #ccc;
    background: white;
    width: 100%;
    max-height: 200px;
    overflow-y: auto;
    z-index: 1;
  }

  .options div {
    padding: 10px;
    display: flex;
    align-items: center;
  }

  .options div:hover {
    background-color: #f0f0f0;
  }

  .selected {
    display: flex;
    align-items: center;
  }
</style>

<!-- Start::app-content -->
<div class="main-content app-content" style="background-color: #f4f4f4">
  <div class="container-fluid">
    <!-- Start::page-header -->
    <div class="d-flex align-items-center justify-content-between page-header-breadcrumb flex-wrap gap-2">
      <div>
        <h1 class="page-title fw-medium fs-18 mb-0">
          <span style="font-weight: 700; font-family: Poppins">Add New Expense</span>
        </h1>
      </div>
    </div>
    <!-- End::page-header -->

    <form id="addExpenseForm">
      <div class="row">
        <div class="col-xl-12">
          <div class="card custom-card">
            <div class="card-body add-products">
              <div class="row gx-4">
                <div class="col-xxl-12 col-xl-12 col-lg-12 col-md-6">
                  <div class="card custom-card shadow-none mb-0 border-0">
                    <div class="card-body p-0">
                      <div class="row gy-3">
                        <div class="col-xl-12">
                          <label for="product-cost-add" class="form-label">
                            <span style="font-size: 15px"><b>It's time to add a new expense!</b></span>
                          </label>
                          <button class="btn btn-danger border" type="button" id="addNewExpenseBtn" data-region-id="123" style="float: right">
                            + Add New Expense Type
                          </button> 
                        </div>

                        <div class="col-xl-6">
                          <label for="expense_type" class="form-label">Type of Expense</label>
                          <select class="form-control" name="expense_type" id="expense_type" required>
                            <option value="">Loading...</option>
                          </select>
                        </div>
                        <div class="col-xl-6">
                          <label for="submitted_by" class="form-label">Submitted By:</label>
                          <input type="text" class="form-control" id="submitted_by" name="submitted_by" placeholder="Enter Name" maxlength="50" required />
                        </div>

                        <div class="row">
                          <div class="col-xl-6">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" placeholder="Enter description" rows="3" maxlength="200" required></textarea>
                          </div>

                          <div class="col-xl-6">
                            <label for="chapter" class="form-label">Chapter</label>
                            <select class="form-control" name="chapter" id="chapter" required>
                              <option value="">Select Chapter</option>
                            </select>
                          </div>
                        </div>

                        <div id="membershipFeesContainer" class="container">
                          <div class="row">
                            <div class="col-xl-4 col-md-4">
                              <label class="form-label" for="amount">Amount</label>
                              <input type="number" class="form-control" id="amount" name="amount" placeholder="Enter Amount" maxlength="10" required />
                              
                              <!-- Added GST Checkbox -->
                              <div class="form-check mt-2" style="margin-left: 4px;">
                                <input 
                                  type="checkbox" 
                                  class="form-check-input" 
                                  id="withGST" 
                                  name="withGST"
                                  style="cursor: pointer;"
                                />
                                <label class="form-check-label" for="withGST" style="cursor: pointer; user-select: none;">
                                  With GST
                                </label>
                              </div>
                            </div>

                            <div class="col-xl-4 col-md-4">
                              <label for="payment_status" class="form-label">Payment Status</label>
                              <select class="form-control" name="payment_status" id="payment_status">
                                <option value="">Payment Status</option>
                                <option value="paid">Paid</option>
                                <option value="pending">Pending</option>
                              </select>
                            </div>

                            <div class="col-xl-4 col-md-4">
                              <label for="bill_date" class="form-label">Bill Date:</label>
                              <input type="date" id="bill_date" name="bill_date" class="form-control" required />
                            </div>
                          </div>

                          <div class="row">
                            <div class="col-xl-4">
                              <label for="upload_bill" class="form-label">Upload Bill</label>
                              <input type="file" class="form-control" id="upload_bill" name="upload_bill" required />
                            </div>
                            <div class="col-xl-4">
                              <label for="bill_no" class="form-label">Bill No.</label>
                              <input type="text" class="form-control" id="bill_no" name="bill_no" placeholder="Enter Bill No." maxlength="20" required/>
                            </div>
                            <div class="col-xl-4">
                              <label for="transaction_no" class="form-label">Transaction No.</label>
                              <input type="text" class="form-control" id="transaction_no" name="transaction_no" placeholder="Enter Transaction No" maxlength="20" required />
                            </div>
                          </div>
                        </br>
                          <button type="button" id="addExpenseButton" class="btn btn-success me-2 mb-2 mb-sm-0">Add Expense</button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </form>
    <div id="formMessage"></div>
  </div>
</div>
<!-- End::content -->

<script>
document.addEventListener("DOMContentLoaded", async function () {
  // First get the login type and email from token
  const loginType = getUserLoginType();
  const userEmail = getUserEmail();
  
  console.log('Current user details:', {
    loginType: loginType,
    email: userEmail
  });

  // Fetch data for "Type of Expense"
  try {
    const response = await fetch("https://backend.bninewdelhi.com/api/expenseType");
    const data = await response.json();
    console.log("Expense Types:", data);
    const expenseTypeDropdown = document.getElementById("expense_type");

    // Clear existing options
    expenseTypeDropdown.innerHTML = '<option value="">Select</option>';

    // Sort data by expense_name in ascending order
    data.sort((a, b) => a.expense_name.localeCompare(b.expense_name));

    // Populate dropdown with sorted data
    data.forEach((expense) => {
      const option = document.createElement("option");
      option.value = expense.expense_id;
      option.textContent = expense.expense_name;
      expenseTypeDropdown.appendChild(option);
    });
  } catch (error) {
    console.error("Error fetching expense types:", error);
  }

  // Fetch and populate chapters dropdown
  try {
    console.log('Fetching chapters data...');
    const response = await fetch("https://backend.bninewdelhi.com/api/chapters");
    const chapters = await response.json();
    console.log("All available chapters:", chapters);

    const chapterDropdown = document.getElementById("chapter");
    chapterDropdown.innerHTML = '<option value="">Select Chapter</option>';

    // Filter chapters based on login type and email
    let filteredChapters = [];
    if (loginType === 'ro_admin') {
      console.log('User is RO Admin - showing all chapters');
      filteredChapters = chapters;
    } else {
      console.log('User is not RO Admin - filtering chapters by email');
      filteredChapters = chapters.filter(
  chapter =>
    chapter.email_id === userEmail ||
    chapter.vice_president_mail === userEmail ||
    chapter.president_mail === userEmail ||
    chapter.treasurer_mail === userEmail
);

      console.log('Filtered chapters by email:', filteredChapters);
    }

    // Sort filtered chapters by name
    filteredChapters.sort((a, b) => a.chapter_name.localeCompare(b.chapter_name));
    console.log('Sorted chapters to display:', filteredChapters);

    // Populate dropdown with filtered chapters
    if (filteredChapters.length > 0) {
      filteredChapters.forEach((chapter) => {
        const option = document.createElement("option");
        option.value = chapter.chapter_id;
        option.textContent = chapter.chapter_name;
        chapterDropdown.appendChild(option);
        console.log(`Added chapter to dropdown: ${chapter.chapter_name} (ID: ${chapter.chapter_id})`);
      });
    } else {
      console.log('No chapters available for this user');
      const option = document.createElement("option");
      option.value = "";
      option.textContent = "No chapters available";
      chapterDropdown.appendChild(option);
    }

  } catch (error) {
    console.error("Error in chapter dropdown population:", error);
    const chapterDropdown = document.getElementById("chapter");
    chapterDropdown.innerHTML = '<option value="">Error loading chapters</option>';
  }

  const addExpenseButton = document.getElementById("addExpenseButton");

  addExpenseButton.addEventListener("click", async function () {
    const form = document.getElementById("addExpenseForm");
    const formData = new FormData(form);

    // Validate file upload
    const fileInput = document.getElementById('upload_bill');
    const file = fileInput.files[0];
    
    // File validation
    if (!file) {
        Swal.fire('Error!', 'Please select a bill file', 'error');
        return;
    }

    // Validate file type
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'application/pdf'];
    if (!allowedTypes.includes(file.type)) {
        Swal.fire('Error!', 'Only JPG, PNG and PDF files are allowed', 'error');
        return;
    }

    // Validate file size (5MB limit)
    const maxSize = 5 * 1024 * 1024; // 5MB in bytes
    if (file.size > maxSize) {
        Swal.fire('Error!', 'File size should not exceed 5MB', 'error');
        return;
    }

    // Get selected chapter and convert ID to number
    const selectedChapter = document.getElementById("chapter");
    const selectedChapterId = parseInt(selectedChapter.value, 10);
    
    // Validate chapter selection
    if (!selectedChapterId || isNaN(selectedChapterId)) {
      Swal.fire('Error!', 'Please select a valid chapter', 'error');
      console.error('Invalid chapter selection:', {
        originalValue: selectedChapter.value,
        parsedValue: selectedChapterId
      });
      return;
    }

    // Clear and append form data
    formData.delete('chapter_id');
    formData.append('chapter_id', selectedChapterId);

    // Debug: Log form data before sending
    console.log('📤 Sending Form Data:', {
        expense_type: parseInt(document.getElementById('expense_type').value, 10),
        submitted_by: document.getElementById('submitted_by').value,
        description: document.getElementById('description').value,
        chapter_id: selectedChapterId,
        amount: parseFloat(document.getElementById('amount').value),
        withGST: document.getElementById('withGST').checked,
        payment_status: document.getElementById('payment_status').value,
        bill_date: document.getElementById('bill_date').value,
        bill_no: document.getElementById('bill_no').value,
        transaction_no: document.getElementById('transaction_no').value,
        file: {
            name: file.name,
            type: file.type,
            size: file.size
        }
    });

    try {
        showLoader();
        
        // Add GST value to formData
        formData.append('withGST', document.getElementById('withGST').checked);

        const response = await fetch("https://backend.bninewdelhi.com/api/addExpense", {
            method: "POST",
            body: formData, // FormData now includes withGST value
        });

        if (response.ok) {
            const data = await response.json();
            console.log('✅ API Response:', data);
            
            Swal.fire({
                title: 'Success!',
                text: data.message,
                icon: 'success',
                confirmButtonText: 'OK'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/rexp/view-expenses';
                }
            });
            form.reset();
        } else {
            const errorResponse = await response.json();
            console.error('❌ API Error:', errorResponse);
            Swal.fire('Failed!', errorResponse.message, 'error');
        }
    } catch (error) {
        console.error('❌ Error:', error);
        Swal.fire('Error!', 'Failed to add expense. Please try again.', 'error');
    } finally {
        hideLoader();
    }
  });
});

// Helper function to check if arrays are equal (for debugging)
function arraysEqual(a, b) {
  if (a === b) return true;
  if (a == null || b == null) return false;
  if (a.length !== b.length) return false;
  for (let i = 0; i < a.length; ++i) {
    if (a[i] !== b[i]) return false;
  }
  return true;
}
</script>

<script src="../../assets/js/expense.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<%- include('../partials/footer') %>
